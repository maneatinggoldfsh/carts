pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
function class (init)
  local c = {}
  c.__index = c
  c._ctr=init
  function c.init (...)
    local self = setmetatable({},c)
    c._ctr(self,...)
    return self
  end
  return c
end

function subclass(parent,init)
 local c=class(init)
 return setmetatable(c,{__index=parent})
end

-- vectors
local v2mt={}
v2mt.__index=v2mt

function v2(x,y)
 local t={x=x,y=y}
 return setmetatable(t,v2mt)
end

function v2mt.__add(a,b)
 return v2(a.x+b.x,a.y+b.y)
end

function v2mt.__sub(a,b)
 return v2(a.x-b.x,a.y-b.y)
end

function v2mt.__mul(a,b)
 if (type(a)=="number") return v2(b.x*a,b.y*a)
 if (type(b)=="number") return v2(a.x*b,a.y*b)
 return v2(a.x*b.x,a.y*b.y)
end

function v2mt.__div(a,b)
 if (type(a)=="number") return v2(b.x/a,b.y/a)
 if (type(b)=="number") return v2(a.x/b,a.y/b)
 return v2(a.x/b.x,a.y/b.y)
end

function v2mt.__eq(a,b)
 return a.x==b.x and a.y==b.y
end

function v2mt:min(v)
 return v2(min(self.x,v.x),min(self.y,v.y))
end

function v2mt:max(v)
 return v2(max(self.x,v.x),max(self.y,v.y))
end

function v2mt:magnitude()
 return sqrt(self.x^2+self.y^2)
end

function v2mt:sqrmagnitude()
 return self.x^2+self.y^2
end

function v2mt:normalize()
 return self/self:magnitude()
end

function v2mt:str()
 return "["..tostr(self.x)..","..tostr(self.y).."]"
end

function v2mt:flr()
 return v2(flr(self.x),flr(self.y))
end

function v2mt:clone()
 return v2(self.x,self.y)
end

dir_down=0
dir_right=1
dir_up=2
dir_left=3

vec_down=v2(0,1)
vec_up=v2(0,-1)
vec_right=v2(1,0)
vec_left=v2(-1,0)

function dir2vec(dir)
 local dirs={v2(0,1),v2(1,0),v2(0,-1),v2(-1,0)}
 return dirs[(dir+4)%4]
end

function angle2vec(angle)
 return v2(cos(angle),sin(angle))
end

actor_cnt=0

cls_actor=class(typ_actor,function(self,pos)
 self.pos=pos
 self.id=actor_cnt
 actor_cnt+=1
 self.spd=v2(0,0)
 self.is_solid=true
 self.hitbox=hitbox(v2(0,0),v2(8,8))
 add(actors,self)
end)

function cls_actor:bbox(offset)
 if (offset==nil) offset=v2(0,0)
 return self.hitbox:to_bbox_at(self.pos+offset)
end

function cls_actor:str()
 return "actor["..tostr(self.id)..",t:"..tostr(self.typ).."]"
end

function cls_actor:move(o)
 self:move_x(o.x)
 self:move_y(o.y)
end

function cls_actor:move_x(amount)
 if self.is_solid then
  while abs(amount)>0 do
   local step=amount
   if (abs(amount)>1) step=sign(amount)
   amount-=step
   if not self:is_solid_at(v2(step,0)) then
    self.pos.x+=step
   else
    self.spd.x=0
    break
   end
  end
 else
  self.pos.x+=amount
 end
end

function cls_actor:move_y(amount)
 if self.is_solid then
  while abs(amount)>0 do
   local step=amount
   if (abs(amount)>1) step=sign(amount)
   amount-=step
   if not self:is_solid_at(v2(0,step)) then
    self.pos.y+=step
   else
    self.spd.y=0
    break
   end
  end
 else
  self.pos.y+=amount
 end
end

function cls_actor:is_solid_at(offset)
 return solid_at(self:bbox(offset))
end

function cls_actor:collides_with(other_actor)
 return self:bbox():collide(other_actor:bbox())
end

function cls_actor:get_collisions(typ,offset)
 local res={}

 local bbox=self:bbox(offset)
 for actor in all(actors) do
  if actor!=self and actor.typ==typ then
   if (bbox:collide(actor:bbox())) add(res,actor)
  end
 end

 return res
end

function draw_actors(typ)
 for a in all(actors) do
  if ((typ==nil or a.typ==typ) and a.draw!=nil) a:draw()
 end
end

function update_actors(typ)
 for a in all(actors) do
  if ((typ==nil or a.typ==typ) and a.update!=nil) a:update()
 end
end

dir_up=2
dir_down=3
dir_left=0
dir_right=1

-- functions
function appr(val,target,amount)
 return (val>target and max(val-amount,target)) or min(val+amount,target)
end

function sign(v)
 return v>0 and 1 or v<0 and -1 or 0
end

function rndsign()
 return rnd(1)>0.5 and 1 or -1
end

function round(x)
 return flr(x+0.5)
end

function maybe(p)
 if (p==nil) p=0.5
 return rnd(1)<p
end

function mrnd(x)
 return rnd(x*2)-x
end

function rnd_elt(v)
 return v[min(#v,1+flr(rnd(#v)+0.5))]
end

function v_idx(pos)
 return pos.x+pos.y*128
end

birds={}
selected_bird=nil
bird_sprs={ 32,16,1 }

function get_row_y(row)
 return row*25+5
end

cls_bird=class(function(self,row,spd,col)
 self.x=128
 self.row=row
 self.spd=spd
 self.col=col
 self.angle=rnd(1)
 self.range=2+rnd(2)
 self.angle_spd=0.05+rnd(0.05)
 add(birds,self)
end)

function cls_bird:update()
 self.x-=self.spd
 self.angle+=self.angle_spd+mrnd(0.1)
 if self.x<19 then
  if self.row==self.col then
   game.score+=1
  else
   game.losses+=1
  end
  del(birds,self)
  if self==selected_bird then
   local _birds=get_closest_birds()
   local dirs={dir_right,dir_down,dir_up}
   for i=1,3 do
    local dir=dirs[i]
    if selected_bird!=nil and _birds[dir]!=nil then
     selected_bird=_birds[dir]
    end
   end
  end
 end
end

function cls_bird:draw()
 local x0=self.x
 local y0=get_row_y(self.row)+cos(self.angle)*self.range
 local off=flr(self.spd*frame/3)%3
 spr(bird_sprs[self.col]+off,x0,y0)
 if self==selected_bird then
  line(x0+2,y0+10,x0+6,y0+10,7)
  line(x0+2,y0-2,x0+6,y0-2,7)
  line(x0-2,y0+2,x0-2,y0+6,7)
  line(x0+10,y0+2,x0+10,y0+6,7)
 end
end

function cls_bird:pos()
 return v2(self.x,get_row_y(self.row))
end

function get_closest_birds()
 local res={}
 local up,down,left,right=200,200,200,200

 local spos=selected_bird:pos()

 for b in all(birds) do
  if b!=selected_bird then
   local bpos=b:pos()
   local d=(bpos-spos):magnitude()

   if bpos.y<spos.y and d<up then
    res[dir_up]=b
    up=d
   end
   if bpos.y>spos.y and d<down then
    res[dir_down]=b
    down=d
   end
   if bpos.y==spos.y then
    if bpos.x<spos.x and d<left then
     res[dir_left]=b
     left=d
    end
    if bpos.x>spos.x and d<right then
     res[dir_right]=b
     right=d
    end
   end
  end
 end
 return res
end

houses={}

house_sprs={64,66,68}

cls_house=class(function(self,row,col)
 self.row=row
 self.col=col
 add(houses,self)
end)

function cls_house:update()
end

function cls_house:draw()
 spr(house_sprs[self.row],10,get_row_y(self.row)-5,2,2)
end

cls_game=class(function(self)
 self.score=0
 self.losses=0
end)

function cls_game:update()
 if rnd(1)<0.01 then
  local row=flr(rnd(3))+1
  local col=flr(rnd(3))+1
  local spd=0.2+rnd(0.2)
  cls_bird.init(row,spd,col)
 end

 if (selected_bird==nil and #birds>0) selected_bird=birds[1]
 local _birds=get_closest_birds()

 if btn(4) and selected_bird!=nil then
  if (btnp(dir_up) and selected_bird.row>1) selected_bird.row-=1
  if (btnp(dir_down) and selected_bird.row<3) selected_bird.row+=1
 else
  for i=0,3 do
   if btnp(i) and _birds[i]!=nil then
    selected_bird=_birds[i]
   end
  end
 end
end

function cls_game:draw()
 print("losses: "..tostr(self.losses),20,0,7)
 print("score: "..tostr(self.score),80,0,7)
end


frame=0
lasttime=time()
dt=0

game=cls_game.init()

-->8
function _init()
 cls_bird.init(1,0.1,3)
 cls_bird.init(2,0.2,1)
 cls_bird.init(3,0.15,2)
 selected_bird=birds[1]

 cls_house.init(1,1)
 cls_house.init(2,2)
 cls_house.init(3,3)
end

function _update()
 frame+=1
 dt=time()-lasttime
 lasttime=time()
 game:update()
 foreach(birds,function(b) b:update() end)
end

function _draw()
 cls()
 foreach(houses,function(h) h:draw() end)
 foreach(birds,function(b) b:draw() end)
 game:draw()
end

__gfx__
000000000088eee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000a80880000000000000ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700aa8888000088800000ee8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000aee888800a8088000a808800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700000ee8880aa888880aa888880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000e88800022888800228888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000009098880009900000909000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00cc67700000000000ccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0ac0cc00000000000ac0c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
aacccc0000ccc000aacccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a97cccc00ac0cc0009c11cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0077ccc0aaccccc00cc111cc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007ccc000cccccc0ccc111c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00909ccc000990000090900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00bb3330000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0ab0bb000000000000b7700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
aabbbb0000bbb0000ab0b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a97b33b00ab0bb00aabbbb3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00773330aabb33b0097b33b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007b33000bbb33b007bb33b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00909bbb000990000009900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dd000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dddd00
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0000dd0d00
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddddd00
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d000d00
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d000d00
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0ddd00
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000449949949940000044994994994000004499499499400000000000000000000000000000000000000000000000000000000000000000000000000000000
00044444444444440004444444444444000444444444444400000000000000000000000000000000000000000000000000000000000000000000000000000000
04444000000000000444400000000000044440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44400444444444004440044444444400444004444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000
40044499999994004004449999999400400444999999940000000000000000000000000000000000000000000000000000000000000000000000000000000000
04499499900994000449949990099400044994999009940000000000000000000000000000000000000000000000000000000000000000000000000000000000
04949499000094000494949900009400049494990000940000000000000000000000000000000000000000000000000000000000000000000000000000000000
04499499000094000449949900009400044994990000940000000000000000000000000000000000000000000000000000000000000000000000000000000000
04949499900994000494949990099400049494999009940000000000000000000000000000000000000000000000000000000000000000000000000000000000
04499499944494000449949994449400044994999444940000000000000000000000000000000000000000000000000000000000000000000000000000000000
04949499999994000494949999999400049494999999940000000000000000000000000000000000000000000000000000000000000000000000000000000000
04499499999994000449949999999400044994999999940000000000000000000000000000000000000000000000000000000000000000000000000000000000
033333bbbbbbbb00011111cccccccc00022222888888880000000000000000000000000000000000000000000000000000000000000000000000000000000000
04444444444444000444444444444400044444444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000
