pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

function _init()
 poke(0x5f2d,1)
end

tether={x=64,y=28}

mode_swinging=1
mode_free=2
mode_pulling=3

obj={
 x=10,y=28,
 sx=.2,sy=2,
 mode=mode_free,
 l=0,
 prevx=10,prevy=28,
 fs=5 --frame sensitivity
}

maxfall=5
gravity=0.20
maxl=10

prevbtn=false

function _update()
-- x=stat(32)
-- y=stat(33)
 local _gravity=gravity
 if (obj.mode==mode_free) _gravity*=0.8
 if (obj.mode==mode_swing) _gravity*=1.5
 obj.sy=appr(obj.sy,maxfall,_gravity)

 obj.prevx=obj.x
 obj.prevy=obj.y

 if (obj.x<=0) obj.x=127
 if (obj.x>127) obj.x=0
 if (obj.y<=0) obj.y=117  --if (obj.y<=0) obj.y=115 --edited
 printh("x,y "..tostr(obj.x)..","..tostr(obj.y))
 if obj.y>=118 then --if obj.y>118 then  --edited
  obj.y=118
  --obj.sy=-obj.sy --commented out --edited
  obj.sx*=0.95
  obj.sy=0 --obj.sy*=0.3 --edited
  if (abs(obj.sy)<0.5) obj.sy=0
  if (abs(obj.sx)<0.5) obj.sx=0
 end

 obj.y+=obj.sy
 obj.x+=obj.sx

 obj.x=mid(0,obj.x,128)
 obj.y=mid(0,obj.y,128)

 local v={x=obj.x-tether.x,y=obj.y-tether.y}
 local l=sqrt(v.x^2+v.y^2)

 if btn(4) and not previnput then
  if obj.mode==mode_free then
   printh("pulling")
   obj.mode=mode_pulling
   obj.l=l
  end
 end

 if not btn(4) and obj.mode!=mode_free then
  obj.mode=mode_free
 end

 prevbtn=btn(4)

 local _maxl=maxl
 if obj.mode==mode_pulling then
  _maxl=max(obj.l,maxl)
  obj.l-=3
 end

 if obj.mode!=mode_free then
  printh("obj l "..tostr(obj.l).." mode "..tostr(obj.mode).." l "..tostr(l).." maxl "..tostr(_maxl))
  if obj.mode==mode_pulling and l<maxl then
   printh("swinging")
   obj.mode=mode_swinging
  end

  if l>_maxl then
   printh("cap v  "..tostr(_maxl/l))
   v.x=v.x*_maxl/l
   v.y=v.y*_maxl/l
   obj.x=tether.x+v.x
   obj.y=tether.y+v.y
   obj.sx=obj.x-obj.prevx
   obj.sy=obj.y-obj.prevy

   obj.sx*=1
   obj.sy*=1
  end
 end
end

function _draw()
 cls()
-- line(px,py,x,y,7)
-- local a=atan2(x-px,y-py)
-- print(tostr(x)..","..tostr(y),64,80,7)
-- print(tostr(a),64,64,7)
 if obj.mode!=mode_free then
  line(obj.x,obj.y,tether.x,tether.y,7)
 end

 --rect(obj.x,obj.y,obj.x+4,obj.y+4,8)
 --rect(obj.x-7,obj.y-7,obj.x+7,obj.y+7,11)
 circ(tether.x,tether.y,2,9)

--new code starts here

if(obj.y>=118) then
  --printh("stopped on ground")
  spr(17,obj.x,obj.y,1,1,false, false)

elseif(true) then
  if (obj.sy < .2 and obj.sx < .2 and obj.y > tether.y) then
    --printh("player is idle)
    spr(37,obj.x-5,obj.y-1,1,1,false, false)

  elseif (obj.sy < .4 and obj.prevx > obj.x) then
    --printh("player was moving left")
    spr(35,obj.x-3,obj.y-2,1,1,true, false)
  
  elseif (obj.sy < .4 and obj.prevx < obj.x) then
    --printh("player was moving right")
    spr(35,obj.x-4,obj.y-2,1,1,false, false)

  elseif (obj.sx < .4 and obj.prevy < obj.y and obj.x <= tether.x) then
    --printh("player was moving down tether to right")
    spr(33,obj.x-5,obj.y-3,1,1,false,false)

  elseif (obj.sx < .4 and obj.prevy < obj.y and obj.x > tether.x) then
    --printh("player was moving down and tehter to left")
    spr(33,obj.x-2,obj.y-3,1,1,true, false)

  elseif (obj.sx < .4 and obj.prevy > obj.y and obj.x <= tether.x) then
    --printh("player was moving up, tether to the right")
   -- spr(33,obj.x-5,obj.y-4,1,1,false,true)
   spr(36,obj.x-5,obj.y-2,1,1,true, false)
  elseif (obj.sx < .4 and obj.prevy > obj.y and obj.x > tether.x) then
    --printh("player was moving up, tether to the left")
   -- spr(33,obj.x-2,obj.y-4,1,1,true,true)
  spr(36,obj.x-2,obj.y-2,1,1,false, false)




  elseif (obj.prevx > obj.x and obj.prevy < obj.y) then
    --printh("player was moving down and left")
    spr(34,obj.x-1,obj.y-2,1,1,true, false)
  
  elseif (obj.prevx < obj.x and obj.prevy < obj.y) then
    --printh("player was moving down and right")
    spr(34,obj.x-6,obj.y-2,1,1,false, false)
  
  elseif (obj.prevx > obj.x and obj.prevy > obj.y) then
   -- printh("player was moving up and left")
    spr(36,obj.x-5,obj.y-2,1,1,true, false)
  
  elseif (obj.prevx < obj.x and obj.prevy > obj.y) then
    --printh("player was moving up and right")
    spr(36,obj.x-2,obj.y-2,1,1,false, false)
  end
end


--new code ends here

end
-->8
function appr(val,target,amount)
 return (val>target and max(val-amount,target)) or min(val+amount,target)
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008880000088800000888000008880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000002820000028200000282000002820000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008880000888880008888080808888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000081718000817180008171800081718000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000081118000011100000111000001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008080000080800000808000008080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000088800000888000000000000000008000882080000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000088200000882008000008000008001000288100000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000088808000888780000008000000811180087100000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001780000001110008287180000711100011110000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001100000001111808881100082811000801080000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008080000000110008880080088800000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000080000000000088800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0001000000000000000f0500f050000000f0500f0500000010050100500000010050110501205014050160501a0501f05023050280502e0503305000000000000000000000000000000000000000000000000000
