pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
function _init()
 printh(mget(3,3))
 printh(mget(2,2))
 start=get_tile(17)
 local s_idx=vec_idx(start)
 goal=get_tile(16)
 
 frontier={}
 insert(frontier,start,0)
 came_from={}
 came_from[s_idx]="none"
 cost_so_far={}
 cost_so_far[s_idx]=0
 
 while #frontier>0 do
  current=popend(frontier)
  if vec_idx(current)==vec_idx(goal) then
   break
  end
  
  local neighbours=get_neighbours(current)
  for next in all(neighbours) do
   local idx=vec_idx(next)

   local new_cost=cost_so_far[vec_idx(current)]
   if cost_so_far[idx]==nil or new_cost<cost_so_far[idx] then
    cost_so_far[idx]=new_cost
    local prio=new_cost+heuristic(goal,next)
    insert(frontier,next,prio)
    came_from[idx]=current    
   end
   if idx!=vec_idx(start) and idx!=vec_idx(goal) then
    mset(next[1],next[2],19)
   end
  end
 end
 
 current=came_from[vec_idx(goal)]
 path={}
 local c_idx=vec_idx(current)
 while c_idx!=s_idx do
  add(path,current)
  current=came_from[c_idx]
  c_idx=vec_idx(current)
 end
 reverse(path)
 for pt in all(path) do
  mset(pt[1],pt[2],18)
 end
end

function _update()
end

function _draw()
 cls()
 mapdraw(0,0,0,0,16,16)
end
-->8
msize=16

function get_tile(id)
 for x=0,msize-1 do
  for y=0,msize-1 do
   if mget(x,y)==id then
    return {x,y}
   end
  end
 end
 printh("could not find tile")
end

function vec_idx(vec)
 return map_idx(vec[1],vec[2])
end

function map_idx(x,y)
 return ((x+1)*msize)+y
end

function popend(t)
 local res=t[#t]
 del(t,res)
 return res[1]
end

-- manhattan distance
function heuristic(a,b)
 return abs(a[1]-b[1])+abs(a[2]-b[2])
end

function insert(t,val,p)
 if #t>1 then
  add(t,{})
  for i=(#t),2,-1 do
   local next=t[i-1]
   if p<next[2] then
    t[i]={val,p}
    return
   else
    t[i]=next
   end
  end
  t[1]={val,p}
 else
  add(t,{val,p})
 end
end

function reverse(t)
 for i=1,(#t/2) do
  local tmp=t[i]
  local idx=#t-(i-1)
  t[i]=t[idx]
  t[idx]=tmp
 end
end
-->8
wallid=1

function get_neighbours(pos)
 local neighbours={}
 local x=pos[1]
 local y=pos[2]
 if x>0 and (mget(x-1,y)!=wallid) then
  add(neighbours,{x-1,y})
 end
 if x<(msize-1) and (mget(x+1,y)!=wallid) then
  add(neighbours,{x+1,y})
 end
 if y>0 and (mget(x,y-1)!=wallid) then
  add(neighbours,{x,y-1})
 end
 if y<(msize-1) and (mget(x,y+1)!=wallid) then
  add(neighbours,{x,y+1})
 end
 -- make things walk diagonally??
 if ((x+y)%2==0) reverse(neighbours)
 return neighbours
end
__gfx__
000000000ccccccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c111111c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c111111c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c111111c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c111111c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c111111c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c111111c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000cccccccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000777777770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888800700000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08999980700000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08988980700000070002800000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08988980700000070008800000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08999980700000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888800700000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000777777770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0111000101010000000000010000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000101010001010000010101000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000101000001010000000101000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000101000000010000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000101010001010001010000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000001010000000001010000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000001000000010101010000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000010000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000010000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000101000000010000000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000101000000010001000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000010001100001010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000000000000000000000001010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
